;
; File generated by pyplm compiler
;

	ORG 0100H

PTEST:     ; 0100
LOADJMP	DB  0C3H    ; 0100
LOADADR	DW  PLMTEST    ; 0101
BOOT:     ; 0103
	LHLD SP ; load var left
	SPHL  ; assign STACKPTR
	RET  ; proc return
PRINTCHAR:     ; 0108
	LXI H,_PRINTCHAR_CHAR  ; store proc arg 1
	MOV M,E
	MVI E,002H  ; load const left
	LXI H,_PRINTCHAR_CHAR  ; load var right
	MOV C,M   ; to C
	MVI B,000H  ; zero pad MSB
	CALL MON1  ; proc call
	RET  ; proc return
CRLF:     ; 0118
	MVI E,00DH  ; load const left
	CALL PRINTCHAR  ; proc call
	MVI E,00AH  ; load const left
	JMP PRINTCHAR  ; OPT CALLRET
PRINTNIB:     ; 0122
	LXI H,_PRINTNIB_N  ; store proc arg 1
	MOV M,E
	LXI H,_PRINTNIB_N  ; load var left
	MOV E,M   ; to E
	MVI A,009H  ; OPT MVICA
	CMP E  ; > 
	JNC __L00000
	MVI E,001H  ; rel true left
	JMP __L00001
__L00000:     ; 0135
	MVI E,000H  ; rel false left
__L00001:     ; 0137
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00002  ; skip if
	LXI H,_PRINTNIB_N  ; load var left
	MOV E,M   ; to E
	MVI A,041H  ; OPT MVICA
	ADD E    ; + left
	MOV E,A  ; result to E
	MVI C,00AH  ; load const right
	MOV A,E
	SUB C    ; - left
	MOV E,A  ; result to E
	CALL PRINTCHAR  ; proc call
	JMP __L00003  ; skip else
__L00002:     ; 014f
	LXI H,_PRINTNIB_N  ; load var left
	MOV E,M   ; to E
	MVI A,030H  ; OPT MVICA
	ADD E    ; + left
	MOV E,A  ; result to E
	CALL PRINTCHAR  ; proc call
__L00003:     ; 015a
	RET  ; proc return
PRINTHEX:     ; 015b
	LXI H,_PRINTHEX_B  ; store proc arg 1
	MOV M,E
	LXI H,_PRINTHEX_B  ; load var left
	MOV E,M   ; to E
	MVI C,004H  ; load const right
__L00004:     ; 0165
	STC
	CMC
	MOV A,E
	RAR  ; SHR
	MOV E,A
	DCR C
	JNZ __L00004  ; more SHR
	CALL PRINTNIB  ; proc call
	LXI H,_PRINTHEX_B  ; load var left
	MOV E,M   ; to E
	MVI A,00FH  ; OPT MVICA
	ANA E    ; & left
	MOV E,A  ; result to E
	JMP PRINTNIB  ; OPT CALLRET
PRINTADDR:     ; 017c
	XCHG
	SHLD _PRINTADDR_A  ; store proc arg 1
	LHLD _PRINTADDR_A ; load var left
	XCHG    ; to D,E
	MOV E,D  ; HIGH left
	CALL PRINTHEX  ; proc call
	LHLD _PRINTADDR_A ; load var left
	XCHG    ; to D,E
	JMP PRINTHEX  ; OPT CALLRET
PRINTM:     ; 018f
	XCHG
	SHLD _PRINTM_A  ; store proc arg 1
	MVI E,009H  ; load const left
	LHLD _PRINTM_A ; load var right
	MOV C,L
	MOV B,H ; to B,C
	CALL MON1  ; proc call
	RET  ; proc return
PRINT:     ; 019e
	XCHG
	SHLD _PRINT_A  ; store proc arg 1
	CALL CRLF  ; proc call
	LHLD _PRINT_A ; load var left
	XCHG    ; to D,E
	JMP PRINTM  ; OPT CALLRET
PLMTEST:     ; 01ac
	LXI H,__ENDCOM  ; exit address
	PUSH H
	LXI H,00000H  ; load STACKPTR left
	DAD SP
	SHLD SP ; assign
	LXI D,00010H  ; OPT MVIED
	LXI H,_PLMTEST_STACK  ; load ref left
	XCHG
	DAD H  ; index << 1
	DAD D    ; ref offset
	SPHL  ; assign STACKPTR
	LXI D,__L00005  ; load ref left
	CALL PRINT  ; proc call
	CALL CRLF  ; proc call
START:     ; 01ca
	LHLD _PLMTEST_A + 00002H ; load var left
	SHLD _PLMTEST_I ; assign
	LHLD _PLMTEST_I ; load var left
	XCHG    ; to D,E
	LHLD _PLMTEST_A + 00002H ; load var right
	MOV C,L
	MOV B,H ; to B,C
	XCHG   ; from D,E
	DAD B  ; + left
	SHLD _PLMTEST_J ; assign
	LXI D,00064H  ; OPT MVIED
	XCHG    ; from D,E
	SHLD _PLMTEST_A + 00002H ; assign
	CALL BOOT  ; proc call
	RET  ; program end
__L00005	DB  048H,045H,04CH,04CH,04FH,024H    ; 01e9

; external variables
BDISK		EQU	00004H
MAXB		EQU 00006H
FCB			EQU 0005CH
BUFF		EQU	00080H
; ROM MON calls
__READIN 	EQU 0F806H
__CONOUT 	EQU 0F809H
; external procedures
MON1:
	MOV A,E			; function code in E
	CPI 2
	JZ  __CONOUT	; conout - character in C
	CPI 9
	JZ  __STROUT	; emulate CP/M string output
	RET
MON2:
	MOV A,E			; function code in E
	CPI 3
	JZ  __READTAPE
	MVI E,0FFH
	RET
__READTAPE:
	CALL __READIN	; readerf - character returned in A
	MOV E,A			
	RET
__STROUT:
	MOV L,C			; string address in B,C
	MOV H,B
__STROUT1:
	MOV A,M			; load next character
	CPI '$'
	RZ				; string end
	MOV C,A
	CALL __CONOUT	; character in C
	INX H
	JMP __STROUT1

__ENDCOM:
	RST 001H  ; go to MON80 debug trap
SP	DS  2    ; 0000
_PRINTCHAR_CHAR	DS  1    ; 0000
_PRINTNIB_N	DS  1    ; 0000
_PRINTHEX_B	DS  1    ; 0000
_PRINTADDR_A	DS  2    ; 0000
_PRINTM_A	DS  2    ; 0000
_PRINT_A	DS  2    ; 0000
_PLMTEST_A	DW  10  DUP(?)    ; 0000
_PLMTEST_I	DS  2    ; 0000
_PLMTEST_J	DS  2    ; 0000
_PLMTEST_STACK	DW  16  DUP(?)    ; 0000
MEMORY:

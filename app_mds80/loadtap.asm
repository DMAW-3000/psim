;
; File generated by pyplm compiler
;

	ORG 0100H

LOAD:     ; 0100
LOADJMP	DB  0C3H    ; 0100
LOADADR	DW  LOADCOM    ; 0101
BOOT:     ; 0103
	LHLD SP ; load var left
	SPHL  ; assign STACKPTR
	RET  ; proc return
PRINTCHAR:     ; 0108
	LXI H,_PRINTCHAR_CHAR  ; store proc arg 1
	MOV M,E
	MVI E,002H  ; load const left
	LXI H,_PRINTCHAR_CHAR  ; load var right
	MOV C,M   ; to C
	MVI B,000H  ; zero pad MSB
	CALL MON1  ; proc call
	RET  ; proc return
CRLF:     ; 0118
	MVI E,00DH  ; load const left
	CALL PRINTCHAR  ; proc call
	MVI E,00AH  ; load const left
	JMP PRINTCHAR  ; OPT CALLRET
PRINTNIB:     ; 0122
	LXI H,_PRINTNIB_N  ; store proc arg 1
	MOV M,E
	LXI H,_PRINTNIB_N  ; load var left
	MOV E,M   ; to E
	MVI A,009H  ; OPT MVICA
	CMP E  ; > 
	JNC __L00000
	MVI E,001H  ; rel true left
	JMP __L00001
__L00000:     ; 0135
	MVI E,000H  ; rel false left
__L00001:     ; 0137
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00002  ; skip if
	LXI H,_PRINTNIB_N  ; load var left
	MOV E,M   ; to E
	MVI A,041H  ; OPT MVICA
	ADD E    ; + left
	MOV E,A  ; result to E
	MVI C,00AH  ; load const right
	MOV A,E
	SUB C    ; - left
	MOV E,A  ; result to E
	CALL PRINTCHAR  ; proc call
	JMP __L00003  ; skip else
__L00002:     ; 014f
	LXI H,_PRINTNIB_N  ; load var left
	MOV E,M   ; to E
	MVI A,030H  ; OPT MVICA
	ADD E    ; + left
	MOV E,A  ; result to E
	CALL PRINTCHAR  ; proc call
__L00003:     ; 015a
	RET  ; proc return
PRINTHEX:     ; 015b
	LXI H,_PRINTHEX_B  ; store proc arg 1
	MOV M,E
	LXI H,_PRINTHEX_B  ; load var left
	MOV E,M   ; to E
	MVI C,004H  ; load const right
__L00004:     ; 0165
	STC
	CMC
	MOV A,E
	RAR  ; SHR
	MOV E,A
	DCR C
	JNZ __L00004  ; more SHR
	CALL PRINTNIB  ; proc call
	LXI H,_PRINTHEX_B  ; load var left
	MOV E,M   ; to E
	MVI A,00FH  ; OPT MVICA
	ANA E    ; & left
	MOV E,A  ; result to E
	JMP PRINTNIB  ; OPT CALLRET
PRINTADDR:     ; 017c
	XCHG
	SHLD _PRINTADDR_A  ; store proc arg 1
	LHLD _PRINTADDR_A ; load var left
	XCHG    ; to D,E
	MOV E,D  ; HIGH left
	CALL PRINTHEX  ; proc call
	LHLD _PRINTADDR_A ; load var left
	XCHG    ; to D,E
	JMP PRINTHEX  ; OPT CALLRET
PRINTM:     ; 018f
	XCHG
	SHLD _PRINTM_A  ; store proc arg 1
	MVI E,009H  ; load const left
	LHLD _PRINTM_A ; load var right
	MOV C,L
	MOV B,H ; to B,C
	CALL MON1  ; proc call
	RET  ; proc return
PRINT:     ; 019e
	XCHG
	SHLD _PRINT_A  ; store proc arg 1
	CALL CRLF  ; proc call
	LHLD _PRINT_A ; load var left
	XCHG    ; to D,E
	JMP PRINTM  ; OPT CALLRET
PERROR:     ; 01ac
	XCHG
	SHLD _PERROR_A  ; store proc arg 1
	LXI D,__L00005  ; load ref left
	CALL PRINT  ; proc call
	LHLD _PERROR_A ; load var left
	XCHG    ; to D,E
	CALL PRINTM  ; proc call
	LXI D,__L00006  ; load ref left
	CALL PRINTM  ; proc call
	LHLD _LOADCOM_LA ; load var left
	XCHG    ; to D,E
	CALL PRINTADDR  ; proc call
	CALL CRLF  ; proc call
	JMP BOOT  ; OPT CALLRET
OPEN:     ; 01d0
	XCHG
	SHLD _OPEN_FCB  ; store proc arg 1
	MVI E,00FH  ; load const left
	LHLD _OPEN_FCB ; load var right
	MOV C,L
	MOV B,H ; to B,C
	CALL MON2  ; proc call
	LXI H,_LOADCOM_DCNT   ; assign
	MOV M,E    ; from E
	RET  ; proc return
MAKE:     ; 01e3
	XCHG
	SHLD _MAKE_FCB  ; store proc arg 1
	MVI E,016H  ; load const left
	LHLD _MAKE_FCB ; load var right
	MOV C,L
	MOV B,H ; to B,C
	CALL MON2  ; proc call
	LXI H,_LOADCOM_DCNT   ; assign
	MOV M,E    ; from E
	RET  ; proc return
CLOSE:     ; 01f6
	XCHG
	SHLD _CLOSE_FCB  ; store proc arg 1
	MVI E,010H  ; load const left
	LHLD _CLOSE_FCB ; load var right
	MOV C,L
	MOV B,H ; to B,C
	CALL MON2  ; proc call
	LXI H,_LOADCOM_DCNT   ; assign
	MOV M,E    ; from E
	RET  ; proc return
DELETE:     ; 0209
	XCHG
	SHLD _DELETE_FCB  ; store proc arg 1
	MVI E,013H  ; load const left
	LHLD _DELETE_FCB ; load var right
	MOV C,L
	MOV B,H ; to B,C
	CALL MON1  ; proc call
	RET  ; proc return
DISKWRITE:     ; 0218
	XCHG
	SHLD _DISKWRITE_FCB  ; store proc arg 1
	MVI E,015H  ; load const left
	LHLD _DISKWRITE_FCB ; load var right
	MOV C,L
	MOV B,H ; to B,C
	JMP MON2  ; OPT CALLRET
	RET  ; proc return
MOVE:     ; 0227
	XCHG
	SHLD _MOVE_S  ; store proc arg 1
	MOV L,C
	MOV H,B
	SHLD _MOVE_D  ; store proc arg 2
	LXI H,00002H  ; get ext args on stack
	DAD SP
	MOV A,M  ; proc ext arg load
	STA _MOVE_N  ; assign LSB
__L00007:     ; 0238
	LXI H,_MOVE_N  ; load var left
	MOV E,M   ; to E
	MVI C,001H  ; load const right
	MOV A,E
	SUB C    ; - left
	MOV E,A  ; result to E
	LXI H,_MOVE_N   ; assign
	MOV M,E    ; from E
	MVI A,0FFH  ; OPT MVICA
	CMP E ; <>
	JZ __L00009 ; =
	MVI E,001H  ; rel true left
	JMP __L00010
__L00009:     ; 0250
	MVI E,000H  ; rel false left
__L00010:     ; 0252
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00008  ; skip while
	LHLD _MOVE_S  ; load based left
	MOV E,M   ; to E
	LHLD _MOVE_D  ; assign based
	MOV M,E    ; from E
	LHLD _MOVE_S ; load var left
	XCHG    ; to D,E
	LXI B,00001H  ; OPT MVICB
	XCHG   ; from D,E
	DAD B  ; + left
	SHLD _MOVE_S ; assign
	LHLD _MOVE_D ; load var left
	XCHG    ; to D,E
	LXI B,00001H  ; OPT MVICB
	XCHG   ; from D,E
	DAD B  ; + left
	SHLD _MOVE_D ; assign
	JMP __L00007  ; END
__L00008:     ; 027a
	RET  ; proc return
GETCHAR:     ; 027b
	MVI E,003H  ; load const left
	LXI B,00000H  ; OPT MVICB
	JMP MON2  ; OPT CALLRET
	RET  ; proc return
SETMEM:     ; 0284
	LXI H,_SETMEM_B  ; store proc arg 1
	MOV M,E
	LHLD _LOADCOM_LA ; load var left
	XCHG    ; to D,E
	LHLD _RELOC_L ; load var right
	MOV C,L
	MOV B,H ; to B,C
	MOV A,D
	CMP B  ; <
	JZ __L00014   ; =
	JNC __L00012  ; >
	JMP __L00015  ; <
__L00014:     ; 029c
	MOV A,E
	CMP C  ; <
	JNC __L00012 ; >=
__L00015:     ; 02a1
	MVI E,001H  ; rel true left
	JMP __L00013
__L00012:     ; 02a6
	MVI E,000H  ; rel false left
__L00013:     ; 02a8
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00016  ; skip if
	LXI D,__L00011  ; load ref left
	CALL PERROR  ; proc call
__L00016:     ; 02b3
__L00017:     ; 02b3
	LHLD _LOADCOM_LA ; load var left
	XCHG    ; to D,E
	PUSH D ; save left binary
	LHLD _RELOC_L ; load var left
	XCHG    ; to D,E
	PUSH D ; save left binary
	MVI C,0FFH  ; LAST low right
	POP D  ; restore left binary
	MVI B,000H  ; zero pad MSB
	XCHG     ; from D,E
	DAD B    ; + right
	MOV C,L  ; result to B,C
	MOV B,H
	POP D  ; restore left binary
	MOV A,D
	CMP B   ; >
	JC __L00019   ; <
	JZ __L00021   ; =
	JMP __L00022  ; >
__L00021:     ; 02d2
	MOV A,E
	CMP C  ; >
	JC __L00019  ; <
	JZ __L00019  ; =
__L00022:     ; 02da
	MVI E,001H  ; rel true left
	JMP __L00020
__L00019:     ; 02df
	MVI E,000H  ; rel false left
__L00020:     ; 02e1
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00018  ; skip while
	MVI E,000H  ; load const left
	MOV A,E
	JMP __L00025  ; DO first iter
__L00023:     ; 02ec
	MVI E,07FH  ; load const left
	LDA _SETMEM_I  ; DO load
	INR A   ; DO update
	CMP E   ; DO <=
	JZ __L00025   ; = 
	JNC __L00024  ; > DO complete
__L00025:     ; 02f9
	STA _SETMEM_I  ; DO assign
	LHLD _RELOC_L ; load var left
	XCHG    ; to D,E
	MVI D,000H  ; zero pad index MSB
	LXI H,_RELOC_MBUFF  ; load arr left
	DAD D    ; arr offset
	MOV E,M  ; arr element to (D),E
	PUSH D  ; save left array
	LXI H,_SETMEM_I  ; load var left
	MOV E,M   ; to E
	MVI D,000H  ; zero pad index MSB
	LXI H,00080H  ; store arr
	DAD D  ; arr offset
	POP D  ; arr restore left
	MOV M,E  ; arr assign from (D),C
	LHLD _RELOC_L ; load var left
	XCHG    ; to D,E
	LXI B,00001H  ; OPT MVICB
	XCHG   ; from D,E
	DAD B  ; + left
	SHLD _RELOC_L ; assign
	JMP __L00023  ; END
__L00024:     ; 0323
	LXI H,_RELOC_P  ; load var left
	MOV E,M   ; to E
	MVI A,001H  ; OPT MVICA
	ADD E    ; + left
	MOV E,A  ; result to E
	LXI H,_RELOC_P   ; assign
	MOV M,E    ; from E
	LXI D,0005CH  ; load ref left
	CALL DISKWRITE  ; proc call
	MVI A,000H  ; OPT MVICA
	CMP E ; <>
	JZ __L00026 ; =
	MVI E,001H  ; rel true left
	JMP __L00027
__L00026:     ; 0340
	MVI E,000H  ; rel false left
__L00027:     ; 0342
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00028  ; skip if
	LXI D,__L00029  ; load ref left
	CALL PERROR  ; proc call
__L00028:     ; 034d
	JMP __L00017  ; END
__L00018:     ; 0350
	LXI H,_SETMEM_B  ; load var left
	MOV E,M   ; to E
	PUSH D  ; save left array
	LHLD _LOADCOM_LA ; load var left
	XCHG    ; to D,E
	MVI D,000H  ; zero pad index MSB
	LXI H,_RELOC_MBUFF  ; store arr
	DAD D  ; arr offset
	POP D  ; arr restore left
	MOV M,E  ; arr assign from (D),C
	RET  ; proc return
NEWLINE:     ; 0362
	CALL CRLF  ; proc call
	LHLD _RELOC_TA ; load var left
	XCHG    ; to D,E
	CALL PRINTADDR  ; proc call
	MVI E,03AH  ; load const left
	CALL PRINTCHAR  ; proc call
	MVI E,020H  ; load const left
	JMP PRINTCHAR  ; OPT CALLRET
DIAGNOSE:     ; 0376
	LXI D,__L00030  ; load ref left
	CALL PRINT  ; proc call
	LHLD _RELOC_TA ; load var left
	XCHG    ; to D,E
	CALL PRINTADDR  ; proc call
	LXI D,__L00031  ; load ref left
	CALL PRINT  ; proc call
	LHLD _LOADCOM_LA ; load var left
	XCHG    ; to D,E
	CALL PRINTADDR  ; proc call
	LXI D,__L00032  ; load ref left
	CALL PRINT  ; proc call
	CALL NEWLINE  ; proc call
__L00033:     ; 0399
	LHLD _RELOC_TA ; load var left
	XCHG    ; to D,E
	LHLD _LOADCOM_LA ; load var right
	MOV C,L
	MOV B,H ; to B,C
	MOV A,D
	CMP B  ; <
	JZ __L00037   ; =
	JNC __L00035  ; >
	JMP __L00038  ; <
__L00037:     ; 03ad
	MOV A,E
	CMP C  ; <
	JNC __L00035 ; >=
__L00038:     ; 03b2
	MVI E,001H  ; rel true left
	JMP __L00036
__L00035:     ; 03b7
	MVI E,000H  ; rel false left
__L00036:     ; 03b9
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00034  ; skip while
	LHLD _RELOC_TA ; load var left
	XCHG    ; to D,E
	MVI A,00FH  ; OPT MVICA
	ANA E    ; & left
	MOV E,A  ; result to E
	MVI A,000H  ; OPT MVICA
	CMP E ; =
	JNZ __L00039 ; !=
	MVI E,001H  ; rel true left
	JMP __L00040
__L00039:     ; 03d1
	MVI E,000H  ; rel false left
__L00040:     ; 03d3
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00041  ; skip if
	CALL NEWLINE  ; proc call
__L00041:     ; 03db
	LHLD _RELOC_TA ; load var left
	XCHG    ; to D,E
	LHLD _RELOC_L ; load var right
	MOV C,L
	MOV B,H ; to B,C
	MOV A,E
	SUB C    ; - left
	MOV E,A
	MOV A,D
	SBB B
	MOV D,A  ; result to D,E
	LXI H,_RELOC_MBUFF  ; load arr left
	DAD D    ; arr offset
	MOV E,M  ; arr element to (D),E
	CALL PRINTHEX  ; proc call
	LHLD _RELOC_TA ; load var left
	XCHG    ; to D,E
	LXI B,00001H  ; OPT MVICB
	XCHG   ; from D,E
	DAD B  ; + left
	SHLD _RELOC_TA ; assign
	MVI E,020H  ; load const left
	CALL PRINTCHAR  ; proc call
	JMP __L00033  ; END
__L00034:     ; 0406
	CALL CRLF  ; proc call
	JMP BOOT  ; OPT CALLRET
READHEX:     ; 040c
	CALL GETCHAR  ; proc call
	LXI H,_READHEX_H   ; assign
	MOV M,E    ; from E
	MVI C,030H  ; load const right
	MOV A,E
	SUB C    ; - left
	MOV E,A  ; result to E
	MVI A,009H  ; OPT MVICA
	CMP E   ; <=
	JC __L00042
__L00044:     ; 041e
	MVI E,001H  ; rel true left
	JMP __L00043
__L00042:     ; 0423
	MVI E,000H  ; rel false left
__L00043:     ; 0425
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00045  ; skip if
	LXI H,_READHEX_H  ; load var left
	MOV E,M   ; to E
	MVI C,030H  ; load const right
	MOV A,E
	SUB C    ; - left
	MOV E,A  ; result to E
	RET  ; proc return
__L00045:     ; 0434
	LXI H,_READHEX_H  ; load var left
	MOV E,M   ; to E
	MVI C,041H  ; load const right
	MOV A,E
	SUB C    ; - left
	MOV E,A  ; result to E
	MVI A,005H  ; OPT MVICA
	CMP E  ; > 
	JNC __L00046
	MVI E,001H  ; rel true left
	JMP __L00047
__L00046:     ; 0448
	MVI E,000H  ; rel false left
__L00047:     ; 044a
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00048  ; skip if
	LXI D,__L00049  ; load ref left
	CALL PRINT  ; proc call
	CALL DIAGNOSE  ; proc call
__L00048:     ; 0458
	LXI H,_READHEX_H  ; load var left
	MOV E,M   ; to E
	MVI C,041H  ; load const right
	MOV A,E
	SUB C    ; - left
	MOV E,A  ; result to E
	MVI A,00AH  ; OPT MVICA
	ADD E    ; + left
	MOV E,A  ; result to E
	RET  ; proc return
READBYTE:     ; 0466
	CALL READHEX  ; proc call
	MVI C,004H  ; load const right
__L00050:     ; 046b
	STC
	CMC
	MOV A,E
	RAL  ; SHL
	MOV E,A
	DCR C
	JNZ __L00050  ; more SHL
	PUSH D ; save left binary
	CALL READHEX  ; proc call
	MOV C,E  ; proc ret right to (B),C
	POP D  ; restore left binary
	MOV A,C
	ORA E    ; | left
	MOV E,A  ; result to E
	RET  ; proc return
	RET  ; proc return
READCS:     ; 047f
	LXI H,_RELOC_CS  ; load var left
	MOV E,M   ; to E
	PUSH D ; save left binary
	CALL READBYTE  ; proc call
	LXI H,_READCS_B   ; assign
	MOV M,E    ; from E
	MOV C,E  ; inp assign right
	POP D  ; restore left binary
	MOV A,C
	ADD E    ; + left
	MOV E,A  ; result to E
	LXI H,_RELOC_CS   ; assign
	MOV M,E    ; from E
	LXI H,_READCS_B  ; load var left
	MOV E,M   ; to E
	RET  ; proc return
MAKEDOUBLE:     ; 0499
	LXI H,_MAKEDOUBLE_H  ; store proc arg 1
	MOV M,E
	LXI H,_MAKEDOUBLE_L  ; store proc arg 2
	MOV M,C
	LXI H,_MAKEDOUBLE_H  ; load var left
	MOV E,M   ; to E
	MVI D,000H  ; DOUBLE left
	MVI C,008H  ; load const right
__L00051:     ; 04a9
	STC
	CMC
	MOV A,E
	RAL  ; SHL
	MOV E,A
	MOV A,D
	RAL
	MOV D,A
	DCR C
	JNZ __L00051  ; more SHL
	LXI H,_MAKEDOUBLE_L  ; load var right
	MOV C,M   ; to C
	MVI B,000H  ; zero pad MSB
	MOV A,C
	ORA E    ; | left
	MOV E,A
	MOV A,B
	ORA D
	MOV D,A  ; result to D,E
	RET  ; proc return
	RET  ; proc return
RELOC:     ; 04c3
	LXI D,00000H  ; OPT MVIED
	XCHG    ; from D,E
	SHLD _RELOC_SA ; assign
	SHLD _RELOC_FA ; assign
	SHLD _RELOC_NB ; assign
	MVI E,000H  ; load const left
	LXI H,_RELOC_P   ; assign
	MOV M,E    ; from E
	LXI D,00100H  ; load const left
	XCHG    ; from D,E
	SHLD _RELOC_TA ; assign
	SHLD _RELOC_L ; assign
__L00052:     ; 04e0
	MVI E,001H  ; load const left
	MOV A,E
	ANI 001H  ; bool
	MOV E,A   ; left to E
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00053  ; skip while
__L00054:     ; 04eb
	CALL GETCHAR  ; proc call
	MVI A,03AH  ; OPT MVICA
	CMP E ; <>
	JZ __L00056 ; =
	MVI E,001H  ; rel true left
	JMP __L00057
__L00056:     ; 04f9
	MVI E,000H  ; rel false left
__L00057:     ; 04fb
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00055  ; skip while
	JMP __L00054  ; END
__L00055:     ; 0503
	MVI E,000H  ; load const left
	LXI H,_RELOC_CS   ; assign
	MOV M,E    ; from E
	CALL READCS  ; proc call
	LXI H,_RELOC_RL   ; assign
	MOV M,E    ; from E
	MVI A,000H  ; OPT MVICA
	CMP E ; =
	JNZ __L00058 ; !=
	MVI E,001H  ; rel true left
	JMP __L00059
__L00058:     ; 051b
	MVI E,000H  ; rel false left
__L00059:     ; 051d
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00060  ; skip if
	JMP FIN  ; GO TO
__L00060:     ; 0525
	LHLD _RELOC_NB ; load var left
	XCHG    ; to D,E
	LXI H,_RELOC_RL  ; load var right
	MOV C,M   ; to C
	MVI B,000H  ; zero pad MSB
	XCHG   ; from D,E
	DAD B  ; + left
	SHLD _RELOC_NB ; assign
	CALL READCS  ; proc call
	PUSH D ; save left binary
	CALL READCS  ; proc call
	MOV C,E  ; proc ret right to (B),C
	POP D  ; restore left binary
	CALL MAKEDOUBLE  ; proc call
	XCHG    ; from D,E
	SHLD _RELOC_TA ; assign
	SHLD _LOADCOM_LA ; assign
	LHLD _RELOC_SA ; load var left
	XCHG    ; to D,E
	LXI B,00000H  ; OPT MVICB
	MOV A,C
	CMP E  ; =
	JNZ __L00061 ; !=
	MOV A,B
	CMP D  ; =
	JNZ __L00061 ; !=
	MVI E,001H  ; rel true left
	JMP __L00062
__L00061:     ; 055d
	MVI E,000H  ; rel false left
__L00062:     ; 055f
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00063  ; skip if
	LHLD _LOADCOM_LA ; load var left
	SHLD _RELOC_SA ; assign
__L00063:     ; 056a
	CALL READCS  ; proc call
	LXI H,_RELOC_RT   ; assign
	MOV M,E    ; from E
__L00064:     ; 0571
	LXI H,_RELOC_RL  ; load var left
	MOV E,M   ; to E
	MVI C,001H  ; load const right
	MOV A,E
	SUB C    ; - left
	MOV E,A  ; result to E
	LXI H,_RELOC_RL   ; assign
	MOV M,E    ; from E
	MVI A,0FFH  ; OPT MVICA
	CMP E ; <>
	JZ __L00066 ; =
	MVI E,001H  ; rel true left
	JMP __L00067
__L00066:     ; 0589
	MVI E,000H  ; rel false left
__L00067:     ; 058b
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00065  ; skip while
	CALL READCS  ; proc call
	CALL SETMEM  ; proc call
	LHLD _LOADCOM_LA ; load var left
	XCHG    ; to D,E
	LXI B,00001H  ; OPT MVICB
	XCHG   ; from D,E
	DAD B  ; + left
	SHLD _LOADCOM_LA ; assign
	JMP __L00064  ; END
__L00065:     ; 05a5
	LHLD _LOADCOM_LA ; load var left
	XCHG    ; to D,E
	LHLD _RELOC_FA ; load var right
	MOV C,L
	MOV B,H ; to B,C
	MOV A,D
	CMP B   ; >
	JC __L00068   ; <
	JZ __L00070   ; =
	JMP __L00071  ; >
__L00070:     ; 05b9
	MOV A,E
	CMP C  ; >
	JC __L00068  ; <
	JZ __L00068  ; =
__L00071:     ; 05c1
	MVI E,001H  ; rel true left
	JMP __L00069
__L00068:     ; 05c6
	MVI E,000H  ; rel false left
__L00069:     ; 05c8
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00072  ; skip if
	LHLD _LOADCOM_LA ; load var left
	XCHG    ; to D,E
	LXI B,00001H  ; OPT MVICB
	MOV A,E
	SUB C    ; - left
	MOV E,A
	MOV A,D
	SBB B
	MOV D,A  ; result to D,E
	XCHG    ; from D,E
	SHLD _RELOC_FA ; assign
__L00072:     ; 05de
	LXI H,_RELOC_CS  ; load var left
	MOV E,M   ; to E
	PUSH D ; save left binary
	CALL READBYTE  ; proc call
	MOV C,E  ; proc ret right to (B),C
	POP D  ; restore left binary
	MOV A,C
	ADD E    ; + left
	MOV E,A  ; result to E
	MVI A,000H  ; OPT MVICA
	CMP E ; <>
	JZ __L00073 ; =
	MVI E,001H  ; rel true left
	JMP __L00074
__L00073:     ; 05f6
	MVI E,000H  ; rel false left
__L00074:     ; 05f8
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00075  ; skip if
	LXI D,__L00076  ; load ref left
	CALL PRINT  ; proc call
	CALL DIAGNOSE  ; proc call
__L00075:     ; 0606
	JMP __L00052  ; END
__L00053:     ; 0609
FIN:     ; 0609
	LHLD _LOADCOM_LA ; load var left
	SHLD _RELOC_TA ; assign
__L00077:     ; 060f
	LHLD _RELOC_L ; load var left
	XCHG    ; to D,E
	LHLD _RELOC_TA ; load var right
	MOV C,L
	MOV B,H ; to B,C
	MOV A,D
	CMP B  ; <
	JZ __L00081   ; =
	JNC __L00079  ; >
	JMP __L00082  ; <
__L00081:     ; 0623
	MOV A,E
	CMP C  ; <
	JNC __L00079 ; >=
__L00082:     ; 0628
	MVI E,001H  ; rel true left
	JMP __L00080
__L00079:     ; 062d
	MVI E,000H  ; rel false left
__L00080:     ; 062f
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00078  ; skip while
	MVI E,000H  ; load const left
	CALL SETMEM  ; proc call
	LHLD _LOADCOM_LA ; load var left
	XCHG    ; to D,E
	LXI B,00001H  ; OPT MVICB
	XCHG   ; from D,E
	DAD B  ; + left
	SHLD _LOADCOM_LA ; assign
	JMP __L00077  ; END
__L00078:     ; 0648
	LXI D,__L00083  ; load ref left
	CALL PRINT  ; proc call
	LHLD _RELOC_SA ; load var left
	XCHG    ; to D,E
	CALL PRINTADDR  ; proc call
	LXI D,__L00084  ; load ref left
	CALL PRINT  ; proc call
	LHLD _RELOC_FA ; load var left
	XCHG    ; to D,E
	CALL PRINTADDR  ; proc call
	LXI D,__L00085  ; load ref left
	CALL PRINT  ; proc call
	LHLD _RELOC_NB ; load var left
	XCHG    ; to D,E
	CALL PRINTADDR  ; proc call
	LXI D,__L00086  ; load ref left
	CALL PRINT  ; proc call
	LXI H,_RELOC_P  ; load var left
	MOV E,M   ; to E
	CALL PRINTHEX  ; proc call
	JMP CRLF  ; OPT CALLRET
LOADCOM:     ; 067f
	LXI H,__ENDCOM  ; exit address
	PUSH H
	LXI H,00000H  ; load STACKPTR left
	DAD SP
	SHLD SP ; assign
	LXI D,00010H  ; OPT MVIED
	LXI H,_LOADCOM_STACK  ; load ref left
	XCHG
	DAD H  ; index << 1
	DAD D    ; ref offset
	SPHL  ; assign STACKPTR
	LXI D,00100H  ; load const left
	XCHG    ; from D,E
	SHLD _LOADCOM_LA ; assign
	MVI E,003H  ; load const left
	PUSH D  ; proc ext arg
	LXI D,__L00087  ; load ref left
	PUSH D ; save left binary
	MVI E,05CH  ; load const left
	MVI A,009H  ; OPT MVICA
	ADD E    ; + right
	MOV C,A  ; result to C
	POP D  ; restore left binary
	MVI B,000H  ; zero pad MSB
	CALL MOVE  ; proc call
	POP H  ; proc ext arg discard
	LXI D,0005CH  ; load ref left
	CALL DELETE  ; proc call
	LXI D,0005CH  ; load ref left
	CALL MAKE  ; proc call
	LXI D,0005CH  ; load ref left
	CALL OPEN  ; proc call
	LXI H,_LOADCOM_DCNT  ; load var left
	MOV E,M   ; to E
	MVI A,0FFH  ; OPT MVICA
	CMP E ; =
	JNZ __L00089 ; !=
	MVI E,001H  ; rel true left
	JMP __L00090
__L00089:     ; 06d0
	MVI E,000H  ; rel false left
__L00090:     ; 06d2
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00091  ; skip if
	LXI D,__L00088  ; load ref left
	CALL PERROR  ; proc call
	JMP __L00092  ; skip else
__L00091:     ; 06e0
	CALL RELOC  ; proc call
	LXI D,0005CH  ; load ref left
	CALL CLOSE  ; proc call
	LXI H,_LOADCOM_DCNT  ; load var left
	MOV E,M   ; to E
	MVI A,0FFH  ; OPT MVICA
	CMP E ; =
	JNZ __L00094 ; !=
	MVI E,001H  ; rel true left
	JMP __L00095
__L00094:     ; 06f8
	MVI E,000H  ; rel false left
__L00095:     ; 06fa
	XRA A  ; A = 0
	CMP E  ; rel result
	JZ __L00096  ; skip if
	LXI D,__L00093  ; load ref left
	CALL PERROR  ; proc call
__L00096:     ; 0705
__L00092:     ; 0705
	CALL CRLF  ; proc call
	JMP BOOT  ; OPT CALLRET
	RET  ; program end
__L00005	DB  045H,052H,052H,04FH,052H,03AH,020H,024H    ; 070c
__L00006	DB  02CH,020H,04CH,04FH,041H,044H,020H,041H,044H,044H,052H,045H,053H,053H,020H,024H    ; 0714
__L00011	DB  049H,04EH,056H,045H,052H,054H,045H,044H,020H,04CH,04FH,041H,044H,020H,041H,044H,044H,052H,045H,053H,053H    ; 0724
__L00029	DB  044H,049H,053H,04BH,020H,057H,052H,049H,054H,045H,024H    ; 0739
__L00030	DB  04CH,04FH,041H,044H,020H,041H,044H,044H,052H,045H,053H,053H,020H,020H,024H    ; 0744
__L00031	DB  045H,052H,052H,04FH,052H,020H,041H,044H,044H,052H,045H,053H,053H,020H,024H    ; 0753
__L00032	DB  042H,059H,054H,045H,053H,020H,052H,045H,041H,044H,03AH,024H    ; 0762
__L00049	DB  049H,04EH,056H,041H,04CH,049H,044H,020H,048H,045H,058H,020H,044H,049H,047H,049H,054H,024H    ; 076e
__L00076	DB  043H,048H,045H,043H,04BH,020H,053H,055H,04DH,020H,045H,052H,052H,04FH,052H,024H    ; 0780
__L00083	DB  046H,049H,052H,053H,054H,020H,041H,044H,044H,052H,045H,053H,053H,020H,024H    ; 0790
__L00084	DB  04CH,041H,053H,054H,020H,020H,041H,044H,044H,052H,045H,053H,053H,020H,024H    ; 079f
__L00085	DB  042H,059H,054H,045H,053H,020H,052H,045H,041H,044H,020H,020H,020H,020H,024H    ; 07ae
__L00086	DB  052H,045H,043H,04FH,052H,044H,053H,020H,057H,052H,049H,054H,054H,045H,04EH,020H,024H    ; 07bd
__L00087	DB  043H,04FH,04DH    ; 07ce
__L00088	DB  04EH,04FH,020H,04DH,04FH,052H,045H,020H,044H,049H,052H,045H,043H,054H,04FH,052H,059H,020H,053H,050H,041H,043H,045H,024H    ; 07d1
__L00093	DB  043H,041H,04EH,04EH,04FH,054H,020H,043H,04CH,04FH,053H,045H,020H,046H,049H,04CH,045H,024H    ; 07e9

__CPMENT	EQU 00005H
MON1:
	MOV A,E			; function code in E
	MOV E,C			; address in B,C
	MOV D,B
	MOV C,A
	JMP __CPMENT
MON2:
	MOV A,E			; function code in E
	MOV E,C			; address in B,C
	MOV D,B
	MOV C,A
	CALL __CPMENT
	MOV E,A			; return value in A
	RET
MON3:
	MOV A,E			; function code in E
	MOV E,C			; address in B,C
	MOV D,B
	MOV C,A
	CALL __CPMENT
	MOV E,A			; return value in B,A
	MOV D,B
	RET

__ENDCOM:
	RET  ; return to caller (CP/M ...)
SP	DS  2    ; 0000
_PRINTCHAR_CHAR	DS  1    ; 0000
_PRINTNIB_N	DS  1    ; 0000
_PRINTHEX_B	DS  1    ; 0000
_PRINTADDR_A	DS  2    ; 0000
_PRINTM_A	DS  2    ; 0000
_PRINT_A	DS  2    ; 0000
_LOADCOM_LA	DS  2    ; 0000
_PERROR_A	DS  2    ; 0000
_LOADCOM_DCNT	DS  1    ; 0000
_OPEN_FCB	DS  2    ; 0000
_MAKE_FCB	DS  2    ; 0000
_CLOSE_FCB	DS  2    ; 0000
_DELETE_FCB	DS  2    ; 0000
_DISKWRITE_FCB	DS  2    ; 0000
_MOVE_S	DS  2    ; 0000
_MOVE_D	DS  2    ; 0000
_MOVE_N	DS  1    ; 0000
_RELOC_RL	DS  1    ; 0000
_RELOC_CS	DS  1    ; 0000
_RELOC_RT	DS  1    ; 0000
_RELOC_TA	DS  2    ; 0000
_RELOC_SA	DS  2    ; 0000
_RELOC_FA	DS  2    ; 0000
_RELOC_NB	DS  2    ; 0000
_RELOC_MBUFF	DB  256  DUP(?)    ; 0000
_RELOC_P	DS  1    ; 0000
_RELOC_L	DS  2    ; 0000
_SETMEM_B	DS  1    ; 0000
_SETMEM_I	DS  1    ; 0000
_READHEX_H	DS  1    ; 0000
_READCS_B	DS  1    ; 0000
_MAKEDOUBLE_H	DS  1    ; 0000
_MAKEDOUBLE_L	DS  1    ; 0000
_LOADCOM_STACK	DW  16  DUP(?)    ; 0000
MEMORY:
